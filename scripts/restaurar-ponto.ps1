#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Restaura o projeto para um ponto de restaura√ß√£o espec√≠fico

.DESCRIPTION
    Este script permite voltar o projeto para um ponto de restaura√ß√£o criado anteriormente,
    com op√ß√µes de backup e confirma√ß√£o de seguran√ßa.

.PARAMETER Tag
    Nome da tag do ponto de restaura√ß√£o (obrigat√≥rio)

.PARAMETER Forcar
    For√ßa a restaura√ß√£o sem confirma√ß√£o (use com cuidado)

.PARAMETER CriarBackup
    Cria um backup autom√°tico antes da restaura√ß√£o (padr√£o: true)

.EXAMPLE
    .\restaurar-ponto.ps1 -Tag restore-20241214-143022-estavel
    .\restaurar-ponto.ps1 -Tag restore-20241214-143022-estavel -Forcar

.NOTES
    ATEN√á√ÉO: Esta opera√ß√£o pode sobrescrever mudan√ßas n√£o commitadas!
#>

param(
    [Parameter(Mandatory=$true)]
    [string]$Tag,
    
    [Parameter(Mandatory=$false)]
    [switch]$Forcar,
    
    [Parameter(Mandatory=$false)]
    [bool]$CriarBackup = $true
)

# Verificar se estamos em um reposit√≥rio Git
if (-not (Test-Path ".git")) {
    Write-Error "‚ùå Erro: Este diret√≥rio n√£o √© um reposit√≥rio Git."
    exit 1
}

# Verificar se a tag existe
$tagExiste = git tag -l $Tag
if (-not $tagExiste) {
    Write-Error "‚ùå Erro: A tag '$Tag' n√£o foi encontrada."
    Write-Host ""
    Write-Host "üí° Para listar tags dispon√≠veis:" -ForegroundColor Cyan
    Write-Host "   .\listar-pontos-restauracao.ps1" -ForegroundColor White
    exit 1
}

# Obter informa√ß√µes da tag
$mensagemTag = git tag -l --format='%(contents)' $Tag
$commitTag = git rev-list -n 1 $Tag
$commitAtual = git rev-parse HEAD

# Verificar se j√° estamos neste ponto
if ($commitTag -eq $commitAtual) {
    Write-Host "‚úÖ Voc√™ j√° est√° no ponto de restaura√ß√£o '$Tag'!" -ForegroundColor Green
    exit 0
}

Write-Host "üè∑Ô∏è  RESTAURA√á√ÉO DE PONTO" -ForegroundColor Cyan
Write-Host "=" * 40 -ForegroundColor Gray
Write-Host "üìå Tag: $Tag" -ForegroundColor Yellow
Write-Host "üìù Descri√ß√£o: $mensagemTag" -ForegroundColor White
Write-Host "üîó Commit: $($commitTag.Substring(0,7))" -ForegroundColor Gray
Write-Host ""

# Verificar mudan√ßas n√£o commitadas
$status = git status --porcelain
if ($status -and -not $Forcar) {
    Write-Warning "‚ö†Ô∏è  ATEN√á√ÉO: H√° mudan√ßas n√£o commitadas que ser√£o perdidas:"
    git status --short
    Write-Host ""
}

# Criar backup se solicitado
if ($CriarBackup -and -not $Forcar) {
    Write-Host "üíæ Criando backup autom√°tico..." -ForegroundColor Cyan
    $timestampBackup = Get-Date -Format "yyyyMMdd-HHmmss"
    $tagBackup = "backup-antes-restauracao-$timestampBackup"
    
    # Committar mudan√ßas pendentes no backup
    if ($status) {
        git add .
        git commit -m "backup autom√°tico antes de restaurar para $Tag"
    }
    
    git tag -a $tagBackup -m "BACKUP AUTOM√ÅTICO: Criado antes de restaurar para $Tag ($(Get-Date -Format 'dd/MM/yyyy HH:mm:ss'))"
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Backup criado: $tagBackup" -ForegroundColor Green
    } else {
        Write-Warning "‚ö†Ô∏è  Erro ao criar backup, mas continuando..."
    }
    Write-Host ""
}

# Confirma√ß√£o final
if (-not $Forcar) {
    Write-Host "‚ùì CONFIRMA√á√ÉO NECESS√ÅRIA" -ForegroundColor Red
    Write-Host "Esta opera√ß√£o ir√°:" -ForegroundColor Yellow
    Write-Host "  ‚Ä¢ Sobrescrever mudan√ßas n√£o commitadas" -ForegroundColor Yellow
    Write-Host "  ‚Ä¢ Voltar o projeto para o estado da tag $Tag" -ForegroundColor Yellow
    Write-Host "  ‚Ä¢ Potencialmente perder trabalho n√£o salvo" -ForegroundColor Yellow
    Write-Host ""
    
    $confirmacao = Read-Host "Tem certeza que deseja continuar? Digite 'CONFIRMO' para prosseguir"
    
    if ($confirmacao -ne "CONFIRMO") {
        Write-Host "‚ùå Opera√ß√£o cancelada pelo usu√°rio." -ForegroundColor Red
        exit 1
    }
}

Write-Host "üîÑ Iniciando restaura√ß√£o..." -ForegroundColor Cyan

# Fazer a restaura√ß√£o
git reset --hard $Tag

if ($LASTEXITCODE -ne 0) {
    Write-Error "‚ùå Erro durante a restaura√ß√£o."
    exit 1
}

Write-Host "‚úÖ Restaura√ß√£o conclu√≠da com sucesso!" -ForegroundColor Green
Write-Host ""
Write-Host "üìä Estado atual:" -ForegroundColor Cyan
Write-Host "  ‚Ä¢ Posi√ß√£o: $(git log -1 --format='%h - %s')" -ForegroundColor White
Write-Host "  ‚Ä¢ Data: $(git log -1 --format='%ci')" -ForegroundColor White

# Perguntar sobre push
if (-not $Forcar) {
    Write-Host ""
    $push = Read-Host "Deseja fazer push das mudan√ßas para o reposit√≥rio remoto? (s/N)"
    if ($push -eq "s" -or $push -eq "S") {
        Write-Host "üöÄ Fazendo push..." -ForegroundColor Cyan
        git push --force-with-lease origin main
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Push realizado com sucesso!" -ForegroundColor Green
        } else {
            Write-Warning "‚ö†Ô∏è  Erro ao fazer push. Verifique o reposit√≥rio remoto."
        }
    }
}

Write-Host ""
Write-Host "üéâ Projeto restaurado para o ponto: $Tag" -ForegroundColor Green